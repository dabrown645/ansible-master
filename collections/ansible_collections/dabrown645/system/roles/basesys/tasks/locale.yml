---
- name: Set timezone to system.timezone
  community.general.timezone:
    name: "{{ system.timezone }}"

- name: Check if locale exists
  ansible.builtin.shell: |
    set -e -o pipefail
    locale -a | grep -i "{{ system.locale | regex_replace('-', '') | quote }}"
  register: found_locale
  changed_when: "found_locale.rc != 0"

- name: Set new variables
  ansible.builtin.set_fact:
    sys_locale: "{{ system.locale | regex_replace('(.*)\\..*', '\\1') | quote }}"
    sys_lang: "{{ system.language | regex_replace('-', '') }}"

- name: Check if language exists
  ansible.builtin.shell: |
    set -e -o pipefail
    locale -a | grep -i "{{ sys_lang }}"
  register: found_language
  changed_when: "found_language.rc != 0"

- name: Get current locale and language configuration
  ansible.builtin.command: localectl status
  register: locale_status
  changed_when: "locale_status.rc != 0"

- name: Parse 'LANG' from current locale and language configuration
  ansible.builtin.set_fact:
    locale_lang: "{{ locale_status.stdout | regex_search('LANG=([^\n]+)', '\\1') | first }}"

- name: Parse 'LANGUAGE' from current locale and language configuration
  ansible.builtin.set_fact:
    locale_language: "{{ locale_status.stdout | regex_search('LANGUAGE=([^\n]+)', '\\1') | default(locale_lang, true) }}"

- name: Config locale '{{ system.locale }}' and language '{{ system.language }}'
  ansible.builtin.command: localectl set-locale LANG={{ system.locale }} LANGUAGE={{ system.language }}
  changed_when: locale_lang != system.locale or
    locale_language != system.language
